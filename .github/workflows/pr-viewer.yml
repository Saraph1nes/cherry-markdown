name: PR Reviewer

on:
  pull_request_target: 
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BASE_SHA: ${{ github.event.pull_request.base.sha }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: "${{ env.HEAD_SHA }}"

      - name: Get changed files
        run: |
          # 使用 GitHub API 获取变更文件列表
          DIFF_DOCUMENTS=$(gh api repos/${{ github.repository }}/compare/${{ env.BASE_SHA }}...${{ env.HEAD_SHA }} \
            --jq '.files | .[] | select(.status|IN("added", "modified", "renamed", "copied", "changed")) | .filename')
          # 过滤出相关文件
          GIT_DIFF_CONTENT=$(echo "${DIFF_DOCUMENTS}" | egrep -i "^src/.*\.(js|ts|jsx|tsx|html|css|scss)$" | xargs)
          # 将结果存储在环境变量中
          echo "GIT_DIFF_CONTENT=${GIT_DIFF_CONTENT}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
        if: ${{ env.GIT_DIFF_CONTENT }}
        with:
          repository: ${{ github.repository }}
          ref: "${{ env.BASE_SHA }}"
          path: base-repo

      - name: Replace changed files
        if: ${{ env.GIT_DIFF_CONTENT }}
        run: |
          for file in ${{ env.GIT_DIFF_CONTENT }}; do
            cp $file base-repo/$file
          done

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'yarn'

      - name: Install dependencies
        uses: borales/actions-yarn@v3.0.0
        with:
          cmd: install

      - name: Eslint
        uses: borales/actions-yarn@v3.0.0
        with:
          cmd: lint:ci

      - name: Run Build
        uses: borales/actions-yarn@v3.0.0
        with:
          cmd: build

      - name: Archive build dist
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist
          
      - name: Archive examples
        uses: actions/upload-artifact@v4
        with:
          name: build-examples
          path: examples

  upload:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Print PR details
        run: |
          echo "The PR ID is ${{ github.event.pull_request.id }}"
          echo "The PR number is ${{ github.event.pull_request.number }}"
          echo "The PR title is ${{ github.event.pull_request.title }}"
          echo "The PR branch is ${{ github.event.pull_request.head.ref }}"

      - run: npm install cos-nodejs-sdk-v5

      - name: Download build dist
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: dist

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-examples
          path: examples

      - name: Upload to COS
        uses: actions/github-script@v7
        with:
          script: |
            const COS = require('cos-nodejs-sdk-v5');
            const fs = require('fs');
            const path = require('path');

            const cos = new COS({
              SecretId: '${{ secrets.COS_SECRETID }}',
              SecretKey: '${{ secrets.COS_SECRETKEY }}',
            });

            const uploadDirectory = (directoryPath, keyPrefix) => {
              const uploadPromises = [];
              const files = fs.readdirSync(directoryPath);
              files.forEach(file => {
                const filePath = path.join(directoryPath, file);
                const key = `${keyPrefix}/${file}`;
                if (fs.lstatSync(filePath).isDirectory()) {
                  uploadPromises.push(uploadDirectory(filePath, key));
                } else {
                  uploadPromises.push(uploadFile(filePath, key));
                }
              });
              return Promise.all(uploadPromises);
            };

            const uploadFile = (filePath, key) => {
              return new Promise((resolve, reject) => {
                cos.uploadFile({
                  Bucket: 'cherry-markdown-dev-1301618266',
                  Region: 'ap-shanghai',
                  Key: key,
                  FilePath: filePath,
                  SliceSize: 1024 * 1024 * 5,  /* 触发分块上传的阈值，超过5MB使用分块上传，非必须 */
                  ContentDisposition: 'inline',
                  CacheControl: 'no-cache',
                  Headers: {
                    'Cache-control': 'no-cache',
                    'Content-Disposition': 'inline',
                  },
                }, function(err, data) {
                  if (err) {
                    reject(err);
                  } else {
                    resolve(data);
                  }
                });
              });
            };

            (async () => {
              try {
                await uploadDirectory('dist', 'pr${{ github.event.pull_request.number }}/dist');
                await uploadDirectory('examples', 'pr${{ github.event.pull_request.number }}/examples');
                console.log('Upload success');
              } catch (err) {
                console.error('Upload failed:', err);
              }
            })();

      - name: Add Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.request('POST /repos/{owner}/{repo}/issues/{issue_number}/comments', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `
            ### 【预览链接】
            
            通过下方链接查看效果 
            
            - https://cherry-markdown-dev-1301618266.cos-website.ap-shanghai.myqcloud.com/pr${{ github.event.pull_request.number }}/examples/index.html
              `
            });