name: PR Test

on:
  pull_request_target: 
    branches: [main, dev]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BASE_SHA: ${{ github.event.pull_request.base.sha }}
      HEAD_SHA: ${{ github.event.pull_request.head.sha }}

    steps:
      - uses: actions/checkout@v2
        with:
          ref: "${{ env.HEAD_SHA }}"

      - name: Get changed files
        run: |
          # 使用 GitHub API 获取变更文件列表
          DIFF_DOCUMENTS=$(gh api repos/${{ github.repository }}/compare/${{ env.BASE_SHA }}...${{ env.HEAD_SHA }} \
            --jq '.files | .[] | {filename, status}')
          echo "Changed files: ${DIFF_DOCUMENTS}"

          # 过滤出相关文件并生成环境变量
          GIT_DIFF_CONTENT=$(echo "${DIFF_DOCUMENTS}" | jq -r '. | select(.filename | test("\\.(js|ts|jsx|tsx|html|css|scss)$")) | "\(.status) \(.filename)"')
          echo "Filtered files: ${GIT_DIFF_CONTENT}"
          
          # 将结果存储在环境变量中
          echo "GIT_DIFF_CONTENT=${GIT_DIFF_CONTENT}" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
        if: ${{ env.GIT_DIFF_CONTENT }}
        with:
          repository: ${{ github.repository }}
          ref: "${{ env.BASE_SHA }}"
          path: base-repo

      - name: Replace changed files
        if: ${{ env.GIT_DIFF_CONTENT }}
        run: |
          IFS=$'\n'
          for entry in ${{ env.GIT_DIFF_CONTENT }}; do
            status=$(echo $entry | cut -d ' ' -f 1)
            file=$(echo $entry | cut -d ' ' -f 2-)
            echo "Processing $file with status $status..."
            if [ "$status" = "added" ] || [ "$status" = "modified" ] || [ "$status" = "renamed" ] || [ "$status" = "copied" ] || [ "$status" = "changed" ]; then
              echo "Adding or modifying $file..."
              mkdir -p "base-repo/$(dirname $file)"
              cp "$file" "base-repo/$file"
              if [ $? -eq 0 ]; then
                echo "Successfully copied $file to base-repo/$file"
              else
                echo "Failed to copy $file to base-repo/$file"
              fi
            elif [ "$status" = "removed" ]; then
              echo "Removing $file..."
              rm -f "base-repo/$file"
              if [ $? -eq 0 ]; then
                echo "Successfully removed $file from base-repo/$file"
              else
                echo "Failed to remove $file from base-repo/$file"
              fi
            else
              echo "Unknown status $status for $file"
            fi
          done

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'yarn'

      - name: Install dependencies
        uses: borales/actions-yarn@v3.0.0
        with:
          cmd: install

      - name: Eslint
        if: ${{ env.GIT_DIFF_CONTENT }}
        run: |
          yarn eslint ${{ env.GIT_DIFF_CONTENT }}
          
      - name: Run Build
        uses: borales/actions-yarn@v3.0.0
        with:
          cmd: build

      - name: Archive build dist
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist
          
      - name: Archive examples
        uses: actions/upload-artifact@v4
        with:
          name: build-examples
          path: examples

  review:
    needs: build
    permissions: write-all
    uses: ./.github/workflows/pr-reviewer.yml
    secrets: inherit